package Json2Pojo;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class J2PJ {

	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		
		
		// TODO Auto-generated method stub
System.out.println("Test");
String s1 ="{\r\n" + 
  		"	\"header\": {\r\n" + 
  		"		\"version\": 1,\r\n" + 
  		"		\"createdBy\": \"ixc2 preprocessor\",\r\n" + 
  		"		\"createdTime\": \"2019-03-18T07:27:23.051Z\",\r\n" + 
  		"		\"messageType\": \"dhc\",\r\n" + 
  		"		\"asset\": \"MyEnterprise.ConnectedProduction.Assets.TEST-RPC_Tags\"\r\n" + 
  		"	},\r\n" + 
  		"	\"payload\": {\r\n" + 
  		"		\"Surface Card Minimum Position Value\": \"15.6328\",\r\n" + 
  		"		\"Fluid Level\": \"25\",\r\n" + 
  		"		\"Fluid Submergence\": \"-32768\",\r\n" + 
  		"		\"Net Stroke Length\": \"8331\",\r\n" + 
  		"		\"Surface Card Maximum Position Value\": \"255.65\",\r\n" + 
  		"		\"Pumping Speed (SPM)\": \"4.31034\",\r\n" + 
  		"		\"Peak Polished Rod Load\": \"32307.2\",\r\n" + 
  		"		\"Fluid Load\": \"0\",\r\n" + 
  		"		\"Minimum Polished Rod Load\": \"18781.1\",\r\n" + 
  		"		\"Pump Fillage\": \"46.2047\",\r\n" + 
  		"		\"Pump Intake Pressure\": \"148.746\",\r\n" + 
  		"		\"Surface Card Load and Position\": [\r\n" + 
  		"			[\"20662\", \"15.63\"],\r\n" + 
  		"			[\"21440\", \"15.93\"],\r\n" + 
  		"			[\"21642\", \"16.23\"],\r\n" + 
  		"			[\"22046\", \"16.45\"],\r\n" + 
  		"			[\"22341\", \"16.87\"],\r\n" + 
  		"			[\"22699\", \"17.21\"],\r\n" + 
  		"			[\"23010\", \"18.08\"],\r\n" + 
  		"			[\"23430\", \"18.97\"],\r\n" + 
  		"			[\"23570\", \"20.18\"],\r\n" + 
  		"			[\"24052\", \"21.63\"],\r\n" + 
  		"			[\"24223\", \"23.05\"],\r\n" + 
  		"			[\"24471\", \"24.9\"],\r\n" + 
  		"			[\"24689\", \"25.97\"],\r\n" + 
  		"			[\"24876\", \"27.37\"],\r\n" + 
  		"			[\"25233\", \"29.92\"],\r\n" + 
  		"			[\"25560\", \"31.34\"],\r\n" + 
  		"			[\"25840\", \"33.14\"],\r\n" + 
  		"			[\"26259\", \"36.04\"],\r\n" + 
  		"			[\"26524\", \"37.7\"],\r\n" + 
  		"			[\"26757\", \"40.78\"],\r\n" + 
  		"			[\"26959\", \"43.19\"],\r\n" + 
  		"			[\"27270\", \"45.43\"],\r\n" + 
  		"			[\"27441\", \"49.12\"],\r\n" + 
  		"			[\"27659\", \"51.93\"],\r\n" + 
  		"			[\"28280\", \"54.63\"],\r\n" + 
  		"			[\"28560\", \"57.34\"],\r\n" + 
  		"			[\"28700\", \"61.25\"],\r\n" + 
  		"			[\"29104\", \"63.93\"],\r\n" + 
  		"			[\"29276\", \"66.31\"],\r\n" + 
  		"			[\"30084\", \"70.02\"],\r\n" + 
  		"			[\"30566\", \"73.13\"],\r\n" + 
  		"			[\"30846\", \"78.06\"],\r\n" + 
  		"			[\"31001\", \"80.73\"],\r\n" + 
  		"			[\"31390\", \"83.57\"],\r\n" + 
  		"			[\"31748\", \"87.73\"],\r\n" + 
  		"			[\"32058\", \"91.02\"],\r\n" + 
  		"			[\"32090\", \"94.36\"],\r\n" + 
  		"			[\"32136\", \"97.8\"],\r\n" + 
  		"			[\"32136\", \"100.81\"],\r\n" + 
  		"			[\"32090\", \"105.3\"],\r\n" + 
  		"			[\"32307\", \"108.24\"],\r\n" + 
  		"			[\"32105\", \"111.13\"],\r\n" + 
  		"			[\"32152\", \"115.51\"],\r\n" + 
  		"			[\"32090\", \"118.47\"],\r\n" + 
  		"			[\"32090\", \"123.21\"],\r\n" + 
  		"			[\"32152\", \"126.04\"],\r\n" + 
  		"			[\"32090\", \"128.91\"],\r\n" + 
  		"			[\"31763\", \"133.07\"],\r\n" + 
  		"			[\"31654\", \"135.96\"],\r\n" + 
  		"			[\"31716\", \"138.77\"],\r\n" + 
  		"			[\"31452\", \"142.6\"],\r\n" + 
  		"			[\"31437\", \"145.31\"],\r\n" + 
  		"			[\"31281\", \"148.42\"],\r\n" + 
  		"			[\"31405\", \"151.78\"],\r\n" + 
  		"			[\"31405\", \"156.12\"],\r\n" + 
  		"			[\"31483\", \"158.36\"],\r\n" + 
  		"			[\"31390\", \"162.33\"],\r\n" + 
  		"			[\"31312\", \"165.25\"],\r\n" + 
  		"			[\"31405\", \"167.71\"],\r\n" + 
  		"			[\"31483\", \"171.26\"],\r\n" + 
  		"			[\"31623\", \"174.41\"],\r\n" + 
  		"			[\"31701\", \"176.89\"],\r\n" + 
  		"			[\"31576\", \"180.7\"],\r\n" + 
  		"			[\"31794\", \"183.06\"],\r\n" + 
  		"			[\"31483\", \"186.88\"],\r\n" + 
  		"			[\"31701\", \"189.48\"],\r\n" + 
  		"			[\"31530\", \"191.74\"],\r\n" + 
  		"			[\"31654\", \"195.53\"],\r\n" + 
  		"			[\"31841\", \"197.77\"],\r\n" + 
  		"			[\"31623\", \"200.03\"],\r\n" + 
  		"			[\"31483\", \"202.0\"],\r\n" + 
  		"			[\"31654\", \"205.78\"],\r\n" + 
  		"			[\"31576\", \"208.3\"],\r\n" + 
  		"			[\"31530\", \"211.08\"],\r\n" + 
  		"			[\"31281\", \"213.33\"],\r\n" + 
  		"			[\"31312\", \"215.26\"],\r\n" + 
  		"			[\"31312\", \"218.19\"],\r\n" + 
  		"			[\"31405\", \"220.01\"],\r\n" + 
  		"			[\"31312\", \"221.67\"],\r\n" + 
  		"			[\"31312\", \"224.42\"],\r\n" + 
  		"			[\"31312\", \"226.82\"],\r\n" + 
  		"			[\"31328\", \"229.14\"],\r\n" + 
  		"			[\"31359\", \"230.59\"],\r\n" + 
  		"			[\"31359\", \"232.25\"],\r\n" + 
  		"			[\"31359\", \"234.84\"],\r\n" + 
  		"			[\"31312\", \"236.17\"],\r\n" + 
  		"			[\"31499\", \"238.13\"],\r\n" + 
  		"			[\"31405\", \"239.7\"],\r\n" + 
  		"			[\"31312\", \"241.03\"],\r\n" + 
  		"			[\"31405\", \"242.76\"],\r\n" + 
  		"			[\"31359\", \"244.09\"],\r\n" + 
  		"			[\"31328\", \"245.47\"],\r\n" + 
  		"			[\"31405\", \"247.48\"],\r\n" + 
  		"			[\"31359\", \"248.83\"],\r\n" + 
  		"			[\"31405\", \"249.93\"],\r\n" + 
  		"			[\"31328\", \"250.79\"],\r\n" + 
  		"			[\"31405\", \"251.94\"],\r\n" + 
  		"			[\"31328\", \"253.76\"],\r\n" + 
  		"			[\"31328\", \"254.09\"],\r\n" + 
  		"			[\"31328\", \"254.23\"],\r\n" + 
  		"			[\"30924\", \"254.64\"],\r\n" + 
  		"			[\"31001\", \"255.25\"],\r\n" + 
  		"			[\"30955\", \"255.32\"],\r\n" + 
  		"			[\"31017\", \"255.39\"],\r\n" + 
  		"			[\"30892\", \"255.53\"],\r\n" + 
  		"			[\"30581\", \"255.65\"],\r\n" + 
  		"			[\"30271\", \"255.34\"],\r\n" + 
  		"			[\"30084\", \"255.14\"],\r\n" + 
  		"			[\"29960\", \"254.01\"],\r\n" + 
  		"			[\"29960\", \"253.92\"],\r\n" + 
  		"			[\"29400\", \"253.2\"],\r\n" + 
  		"			[\"29322\", \"251.89\"],\r\n" + 
  		"			[\"29229\", \"250.65\"],\r\n" + 
  		"			[\"28887\", \"250.04\"],\r\n" + 
  		"			[\"28560\", \"248.46\"],\r\n" + 
  		"			[\"28529\", \"247.1\"],\r\n" + 
  		"			[\"28498\", \"244.84\"],\r\n" + 
  		"			[\"28529\", \"243.04\"],\r\n" + 
  		"			[\"28483\", \"240.02\"],\r\n" + 
  		"			[\"28607\", \"238.79\"],\r\n" + 
  		"			[\"28716\", \"236.71\"],\r\n" + 
  		"			[\"28654\", \"234.19\"],\r\n" + 
  		"			[\"29042\", \"230.57\"],\r\n" + 
  		"			[\"29058\", \"228.2\"],\r\n" + 
  		"			[\"29011\", \"226.24\"],\r\n" + 
  		"			[\"29089\", \"222.32\"],\r\n" + 
  		"			[\"29447\", \"219.84\"],\r\n" + 
  		"			[\"29664\", \"216.1\"],\r\n" + 
  		"			[\"29618\", \"214.37\"],\r\n" + 
  		"			[\"29711\", \"210.4\"],\r\n" + 
  		"			[\"29695\", \"206.95\"],\r\n" + 
  		"			[\"29618\", \"202.23\"],\r\n" + 
  		"			[\"29618\", \"199.48\"],\r\n" + 
  		"			[\"29711\", \"196.81\"],\r\n" + 
  		"			[\"29540\", \"191.44\"],\r\n" + 
  		"			[\"29649\", \"188.05\"],\r\n" + 
  		"			[\"29695\", \"184.25\"],\r\n" + 
  		"			[\"29571\", \"180.84\"],\r\n" + 
  		"			[\"29431\", \"175.58\"],\r\n" + 
  		"			[\"29182\", \"172.26\"],\r\n" + 
  		"			[\"29042\", \"167.69\"],\r\n" + 
  		"			[\"28607\", \"164.3\"],\r\n" + 
  		"			[\"28529\", \"160.89\"],\r\n" + 
  		"			[\"28265\", \"155.31\"],\r\n" + 
  		"			[\"27799\", \"152.06\"],\r\n" + 
  		"			[\"27410\", \"148.9\"],\r\n" + 
  		"			[\"26835\", \"144.26\"],\r\n" + 
  		"			[\"26493\", \"140.49\"],\r\n" + 
  		"			[\"25731\", \"135.4\"],\r\n" + 
  		"			[\"25389\", \"131.76\"],\r\n" + 
  		"			[\"25093\", \"128.37\"],\r\n" + 
  		"			[\"24611\", \"123.86\"],\r\n" + 
  		"			[\"23989\", \"120.8\"],\r\n" + 
  		"			[\"23741\", \"117.53\"],\r\n" + 
  		"			[\"23430\", \"114.15\"],\r\n" + 
  		"			[\"23274\", \"108.75\"],\r\n" + 
  		"			[\"23134\", \"104.5\"],\r\n" + 
  		"			[\"22823\", \"101.14\"],\r\n" + 
  		"			[\"22466\", \"97.99\"],\r\n" + 
  		"			[\"21968\", \"93.22\"],\r\n" + 
  		"			[\"21657\", \"89.7\"],\r\n" + 
  		"			[\"21269\", \"86.66\"],\r\n" + 
  		"			[\"20911\", \"83.18\"],\r\n" + 
  		"			[\"20165\", \"79.83\"],\r\n" + 
  		"			[\"19729\", \"75.1\"],\r\n" + 
  		"			[\"19263\", \"71.68\"],\r\n" + 
  		"			[\"19123\", \"69.21\"],\r\n" + 
  		"			[\"18983\", \"65.07\"],\r\n" + 
  		"			[\"18859\", \"62.32\"],\r\n" + 
  		"			[\"18781\", \"59.58\"],\r\n" + 
  		"			[\"18781\", \"56.8\"],\r\n" + 
  		"			[\"19139\", \"52.86\"],\r\n" + 
  		"			[\"19263\", \"50.47\"],\r\n" + 
  		"			[\"19248\", \"48.07\"],\r\n" + 
  		"			[\"19216\", \"45.48\"],\r\n" + 
  		"			[\"19527\", \"42.84\"],\r\n" + 
  		"			[\"19698\", \"39.47\"],\r\n" + 
  		"			[\"19854\", \"37.54\"],\r\n" + 
  		"			[\"20087\", \"35.48\"],\r\n" + 
  		"			[\"20165\", \"33.61\"],\r\n" + 
  		"			[\"20522\", \"30.48\"],\r\n" + 
  		"			[\"20507\", \"28.68\"],\r\n" + 
  		"			[\"20616\", \"27.33\"],\r\n" + 
  		"			[\"20522\", \"26.28\"],\r\n" + 
  		"			[\"20507\", \"24.15\"],\r\n" + 
  		"			[\"20507\", \"22.91\"],\r\n" + 
  		"			[\"20647\", \"21.33\"],\r\n" + 
  		"			[\"20553\", \"20.35\"],\r\n" + 
  		"			[\"20305\", \"19.15\"],\r\n" + 
  		"			[\"20445\", \"18.45\"],\r\n" + 
  		"			[\"20445\", \"17.08\"],\r\n" + 
  		"			[\"20398\", \"16.37\"],\r\n" + 
  		"			[\"20507\", \"15.98\"],\r\n" + 
  		"			[\"20553\", \"15.88\"],\r\n" + 
  		"			[\"20507\", \"15.77\"],\r\n" + 
  		"			[\"20600\", \"15.73\"],\r\n" + 
  		"			[\"20507\", \"15.69\"]\r\n" + 
  		"		],\r\n" + 
  		"		\"Structural Loading\": \"75.6609\",\r\n" + 
  		"		\"Card ID\": \"13215\",\r\n" + 
  		"		\"Gross Stroke Length\": \"18032\",\r\n" + 
  		"		\"Card Type\": \"0\",\r\n" + 
  		"		\"Load Pump-Off Percent\": \"50\",\r\n" + 
  		"		\"Downhole Card Load and Position\": [\r\n" + 
  		"			[\"-1839\", \"26.0\"],\r\n" + 
  		"			[\"-1839\", \"26.0\"],\r\n" + 
  		"			[\"-1644\", \"23.85\"],\r\n" + 
  		"			[\"-1256\", \"22.63\"],\r\n" + 
  		"			[\"-822\", \"21.99\"],\r\n" + 
  		"			[\"-463\", \"21.17\"],\r\n" + 
  		"			[\"-208\", \"19.55\"],\r\n" + 
  		"			[\"-32\", \"17.19\"],\r\n" + 
  		"			[\"109\", \"14.76\"],\r\n" + 
  		"			[\"294\", \"12.79\"],\r\n" + 
  		"			[\"606\", \"11.1\"],\r\n" + 
  		"			[\"1030\", \"9.19\"],\r\n" + 
  		"			[\"1436\", \"6.88\"],\r\n" + 
  		"			[\"1713\", \"4.56\"],\r\n" + 
  		"			[\"1950\", \"2.73\"],\r\n" + 
  		"			[\"2393\", \"1.44\"],\r\n" + 
  		"			[\"3179\", \"0.53\"],\r\n" + 
  		"			[\"4155\", \"0\"],\r\n" + 
  		"			[\"5026\", \"0.05\"],\r\n" + 
  		"			[\"5678\", \"0.67\"],\r\n" + 
  		"			[\"6284\", \"1.48\"],\r\n" + 
  		"			[\"7053\", \"2.15\"],\r\n" + 
  		"			[\"7948\", \"2.9\"],\r\n" + 
  		"			[\"8713\", \"4.34\"],\r\n" + 
  		"			[\"9191\", \"6.76\"],\r\n" + 
  		"			[\"9507\", \"9.87\"],\r\n" + 
  		"			[\"9899\", \"13.25\"],\r\n" + 
  		"			[\"10432\", \"17.08\"],\r\n" + 
  		"			[\"10947\", \"21.98\"],\r\n" + 
  		"			[\"11284\", \"28.23\"],\r\n" + 
  		"			[\"11468\", \"35.45\"],\r\n" + 
  		"			[\"11638\", \"42.95\"],\r\n" + 
  		"			[\"11841\", \"50.46\"],\r\n" + 
  		"			[\"11992\", \"58.12\"],\r\n" + 
  		"			[\"12017\", \"65.97\"],\r\n" + 
  		"			[\"11960\", \"73.58\"],\r\n" + 
  		"			[\"11910\", \"80.5\"],\r\n" + 
  		"			[\"11879\", \"86.73\"],\r\n" + 
  		"			[\"11815\", \"92.73\"],\r\n" + 
  		"			[\"11721\", \"98.82\"],\r\n" + 
  		"			[\"11685\", \"104.95\"],\r\n" + 
  		"			[\"11770\", \"110.9\"],\r\n" + 
  		"			[\"11908\", \"116.66\"],\r\n" + 
  		"			[\"11972\", \"122.38\"],\r\n" + 
  		"			[\"11939\", \"128.01\"],\r\n" + 
  		"			[\"11913\", \"133.3\"],\r\n" + 
  		"			[\"11979\", \"138.14\"],\r\n" + 
  		"			[\"12083\", \"142.7\"],\r\n" + 
  		"			[\"12101\", \"147.24\"],\r\n" + 
  		"			[\"12015\", \"151.68\"],\r\n" + 
  		"			[\"11949\", \"155.69\"],\r\n" + 
  		"			[\"12021\", \"159.08\"],\r\n" + 
  		"			[\"12188\", \"162.03\"],\r\n" + 
  		"			[\"12295\", \"164.78\"],\r\n" + 
  		"			[\"12246\", \"167.33\"],\r\n" + 
  		"			[\"12101\", \"169.55\"],\r\n" + 
  		"			[\"11986\", \"171.47\"],\r\n" + 
  		"			[\"11952\", \"173.43\"],\r\n" + 
  		"			[\"11936\", \"175.62\"],\r\n" + 
  		"			[\"11858\", \"177.8\"],\r\n" + 
  		"			[\"11712\", \"179.45\"],\r\n" + 
  		"			[\"11553\", \"180.26\"],\r\n" + 
  		"			[\"11428\", \"180.33\"],\r\n" + 
  		"			[\"11342\", \"179.82\"],\r\n" + 
  		"			[\"11275\", \"178.65\"],\r\n" + 
  		"			[\"11211\", \"176.48\"],\r\n" + 
  		"			[\"11135\", \"173.05\"],\r\n" + 
  		"			[\"11014\", \"168.3\"],\r\n" + 
  		"			[\"10810\", \"162.38\"],\r\n" + 
  		"			[\"10520\", \"155.54\"],\r\n" + 
  		"			[\"10213\", \"148.2\"],\r\n" + 
  		"			[\"9986\", \"140.9\"],\r\n" + 
  		"			[\"9866\", \"134.02\"],\r\n" + 
  		"			[\"9734\", \"127.66\"],\r\n" + 
  		"			[\"9383\", \"121.63\"],\r\n" + 
  		"			[\"8702\", \"115.92\"],\r\n" + 
  		"			[\"7827\", \"110.79\"],\r\n" + 
  		"			[\"7066\", \"106.5\"],\r\n" + 
  		"			[\"6631\", \"103.0\"],\r\n" + 
  		"			[\"6409\", \"99.93\"],\r\n" + 
  		"			[\"6045\", \"96.95\"],\r\n" + 
  		"			[\"5277\", \"94.03\"],\r\n" + 
  		"			[\"4184\", \"91.33\"],\r\n" + 
  		"			[\"3083\", \"88.93\"],\r\n" + 
  		"			[\"2223\", \"86.75\"],\r\n" + 
  		"			[\"1597\", \"84.66\"],\r\n" + 
  		"			[\"1065\", \"82.42\"],\r\n" + 
  		"			[\"570\", \"79.76\"],\r\n" + 
  		"			[\"170\", \"76.36\"],\r\n" + 
  		"			[\"-114\", \"72.11\"],\r\n" + 
  		"			[\"-386\", \"67.18\"],\r\n" + 
  		"			[\"-758\", \"61.82\"],\r\n" + 
  		"			[\"-1184\", \"56.14\"],\r\n" + 
  		"			[\"-1499\", \"50.14\"],\r\n" + 
  		"			[\"-1614\", \"44.01\"],\r\n" + 
  		"			[\"-1626\", \"38.19\"],\r\n" + 
  		"			[\"-1689\", \"33.16\"],\r\n" + 
  		"			[\"-1810\", \"29.1\"]\r\n" + 
  		"		],\r\n" + 
  		"		\"Position Pump-Off Percent\": \"62\",\r\n" + 
  		"		\"Surface Stroke Period\": \"1392\"\r\n" + 
  		"	}\r\n" + 
  		"}";

ObjectMapper mapper = new ObjectMapper();
Map<String, Object> RootMap;
try {
	/*String fqn ="";
	String year ="";
	String time ="";
	boolean isbackfill= false;
	int q= 192;*/
	String v ="";
	
	RootMap = mapper.readValue(s1, new TypeReference<Map<String,Object>>(){});
	System.out.println(RootMap.get("header"));
	System.out.println(RootMap.get("payload"));
	Map<String,Object> headerMap = (Map<String,Object>)RootMap.get("header");
	Map<String,Object> PayloadMap = (Map<String,Object>)RootMap.get("payload");
	List<Object> SCLPMap = (List<Object>)PayloadMap.get("Surface Card Load and Position");
	for(String key: headerMap.keySet()) {
    	System.out.println(key+":"+headerMap.get(key));
    	
    }


	System.out.println("Value - "+RootMap.get("createdby"));
	
    for(String key: PayloadMap.keySet()) {
    	System.out.println(key+",Value - :"+PayloadMap.get(key));
    	
    }
   for(Object key: SCLPMap) {
    	System.out.println(key);
    }
	
	//System.out.println(SCLPMap);
} catch (JsonParseException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
} catch (JsonMappingException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
} catch (IOException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
 
	}

}
